<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

	<section>
		<title>DTO</title>

		<para>
			<xref linkend="springfield.annotation"/> 의 strategy 속성이
			<interfacename>Strategy.DTO</interfacename> 인 경우 
			Repository 레이어가 생성되지 않는다. 따라서 아무 동작도 하지 않는  Service 레이어 가 생성된다. 
			이 경우 Service 레이어 는		
       		<ulink url="http://u2ware.github.io/springfield/1.5.0/site/apidocs/com/u2ware/springfield/service/EntityService.html">
				<interfacename>EntityService</interfacename>
			</ulink> 를 implements 한 Bean 으로 교체하여야 한다.
		</para>

		<important>
			<interfacename>Strategy.DTO</interfacename> 방식은 WebMVC 의 요청파라미터 Command 객체와 
			도메인 객체를 분리하기 위해 사용되는 방식이다. 
		</important>
		
		
		<programlistingco>
			<areaspec>
				<area id="x1" coords="5"/>
			</areaspec>
			<programlisting language="java">
package com.yourcompany.yourproject.dto;
		
@Springfield(
	strategy=Strategy.DTO, 
	identity="param1")
public class DtoBean {

	private String param1;
	private Integer param2;
	
	//...
}
			</programlisting>
			<calloutlist>
				<callout arearefs="x1">
					<para>
						<interfacename>Strategy.DTO</interfacename> 인 경우 RESTful URL 구성을 위해 
						identity 속성을 정의 하여야 한다.
					</para>
				</callout>
			</calloutlist>			
		</programlistingco>		
				
				
		<programlistingco>
			<areaspec>
				<area id="x1" coords="15"/>
			</areaspec>
			<programlisting language="java">
package com.yourcompany.yourproject.dto;

@Service("dtoBeanService")
public class DtoBeanService implements EntityService&lt;DtoBean, DtoBean&gt;{

	@Autowired @Qualifier("fooRepository")
	private EntityRepository&lt;Foo, String&gt; fooRepository;

	@Autowired @Qualifier("barRepository")
	private EntityRepository&lt;Bar, Integer&gt; barRepository;
	
	@Override
	@Transactional
	public DtoBean create(DtoBean entity) {

		Foo foo = new Foo();
		foo.setName(entity.getParam1());
		foo.setAge(entity.getParam2());
		fooRepository.save(foo);

		Bar bar = new Bar();
		bar.setSeq(entity.getParam2());
		bar.setDesc(entity.getParam1());
		barRepository.save(bar);
		
		return entity;
	}

	....
}
			</programlisting>
			<calloutlist>
				<callout arearefs="x1">
					<para>
						<interfacename>@Transactional</interfacename> 선언으로 transaction 을 수행하고 
						Repository 레이어를 주입받아서 서비스 로직을 구현할수 있다.
					</para>
				</callout>
			</calloutlist>			
		</programlistingco>		

		<programlistingco>
			<areaspec>
				<area id="x1" coords="5"/>
			</areaspec>

			<programlisting language="xml">
&lt;beans&gt;
	&lt;jdbc:embedded-database id="yourDataSource" type="HSQL"/&gt;  	

	&lt;context:component-scan base-package="com.yourcompany.yourproject"/&gt;  
	
	&lt;springfield:modules base-package="com.yourcompany.yourproject" 
			data-source-ref="yourDataSource"
	/&gt;
	...
&lt;/beans&gt;
			</programlisting>
			<calloutlist>
				<callout arearefs="x1">
					<para>
						Bean 을 교체하기 위해 
						&lt;springfield:modules&gt; 보다 앞서
						&lt;context:component-scan&gt; 으로  MyFooService 를 등록 하여야 한다.
					</para>
				</callout>
			</calloutlist>			
		</programlistingco>

		
	</section>
	